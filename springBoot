Spring MVC Application Structure:

Java Resources
	src
		api
		controller
		entity
		exception
		model
		repository
		resources
		service
		test
		utility
	WebContent
		META-INF
		resources
		WEB-INF
			imgs
			js
			lib
			view
				jsp pages
			applicationContext.xml
			dispatcher-servlet.xml
			web.xml
			

in web.xml
<servlet>
	<servlet-name>dispatcher</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
--------------------
Characteristics: Description

Architecture: MVC with 3-tier architecture
Technologies: Java, Spring Core, Spring Data JPA, Spring MVC, JSP, HTML
Database: MySQL
Application configuration: XML files and annotations
Application properties: Properties file
Deployment: Apache Tomcat
Build system: Manual
--------------------
challenges with Spring MVC:
Application Server
Dependencies
Configurations
--------------------
The above issues can overcome using SpringBoot

Spring Boot -
1.opinionated
2.customizable

Spring Boot components
  Starter - Manages the dependencies of the Spring-based projects by combining the group of common or related dependencies.  Spring Boot forms the opinions based on starters.
  Auto configures  - Detects and automatically configures the Spring applications based on the added dependencies.
  CLI - Command Line Interface to start, test, and stop Spring Boot applications from the command prompt (Not discussed in this course)
  Actuator - Enables enterprise features and gives an insight into the application.
--------------------
Developing IRS with Spring Boot -
1. impl service layer with Spring core
2. impl repository layer with Spring Data JPA
3. impl web layer with Spring MVC
4. Log the error msgs using Logback
5. Perform unit testing using Junit and Mockito
6. Load env specific configs using Profiles
7. Config app properties using YAML
8. Secure the app using Spring Security
9. Build REST web service and consume it
10. Monitor the health of app using Actuators
--------------------
spring boot project structure -
ProjectName
  src/main/java  
  src/main/resources
  src/test/java
  src/test/resources
  JRE System Library
  Maven Depedencies
  src
  target
  pom.xml
--------------------
pom.xml - here we mention dependencies
<parent>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-parent</artifactId>
  <version>1.4.2.RELEASE</version>
</parent>

<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>
</dependencies>

<properties>
  <java.version>1.8</java.version>
</properties>

import org.springframework.boot.SpringApplication;
@SpringBootApplication - says this is spring boot app

inside main method
SpringApplication.run(<classNamewhichAnnotatedWithSpringBootApplication>.class, <argsPassedtoMain>);

Starting Spring Boot -
Sets up default configuration
Starts Spring application context
Performs class path scan
Starts Tomcat server

Controller -
has info abt 
wt URL access triggers it?
Wt method to run when accessed?

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/hello")
The @RequestMapping maps only to the GET method by default. To map to other HTTP methods, we will have to specify it in the annotation.

Embedded Tomcat Server -
Convience
Servlet Container config is now application config
Standalone application
Useful for microservices architecture

Spring MVC Controller -
Client --> Spring MVC --> Controller classes

REST API we'll build -
Course API 
Resources: Topic, Course, Lesson
A Topic can have multiple Courses and 
a Course can consist of muliple Lessons.

Topics:
GET     /topics     Gets all topics
GET     /topics/id  Gets the topic
POST    /topics     Create new topic
PUT     /topics/id  Updates the topic
DELETE  /topics/id  Deletes the topic

import org.springframework.stereotype.Service;
@Service

In Controller, we use Service class as dependency
so create variable and inject

create variable:
private TopicService topicService;

to inject dependency add @Autowired on topic the service variable:
import org.springframework.beans.factory.annotation;
@Autowired
private TopicService topicService;

@RequestMapping("/topics")
public List<Topic> getAllTopics(){
  return topicService.getAllTopics();
}
--------------
# Getting a single resource
TopicService.java:
public Topic getTopic(String id){
  return topics.stream().filter(t -> t.getId().equals(id)).findFirst().get();
}

TopicController.java:
import org.springframework.web.bind.annotation;
@PathVariable

@RequestMapping("/topics/{id}")
public Topic getTopic(@PathVariable String id){
  return topicService.getTopic(id);
}

incase variableName we pass in request is diff from the argument name we pass in the method, then
@RequestMapping("/topics/{foo}")
public Topic getTopic(@PathVariable("foo") String id){
  return topicService.getTopic(id);
}
----------
# Creating a new resource using POST
TopicController.java:
import org.springframework.web.bind.annotation;
RequestMethod, @RequestBody 

@RequestMapping(method=RequestMethod.POST, value="/topics")
public void createTopic(@RequestBody Topic topic){
   topicService.createTopic(topic);
}

TopicService.java:
List<Topic> topics;
public Topic createTopic(Topic topic){
  return topics.add(topic);
}
----------
# Implementing Update and Delete
Update:
TopicController.java:
@RequestMapping(method=RequestMethod.PUT, value="/topics/{id}")
public void updateTopic(@RequestBody Topic topic, @PathVariable String id){
   topicService.updateTopic(topic,id);
}

TopicService.java:
List<Topic> topics;
public void updateTopic(Topic topic,String id){
   for(int i=0;i<topics.size();i++){
      Topic t = topics.get(i);
      if(t.getId().equals(id)){
          topics.set(i,topic);          
          return;
      }
   }
   
}

Delete:
TopicController.java:
@RequestMapping(method=RequestMethod.DELETE, value="/topics/{id}")
public void deleteTopic(@PathVariable String id){
   topicService.deleteTopic(id);
}

TopicService.java:
public void deleteTopic(String id){
//for loop
for(int i=0;i<topics.size();i++){
      Topic t = topics.get(i);
      if(t.getId().equals(id)){
          topics.remove(t);      
          return;
      }
   }
//or
topics.removeIf(t -> t.getId().equals(id));
}
--------------------
Unit 3
Booting Spring Boot
Unit overview -
Starting a Spring Boot App
  - Spring Initializr
  - Spring Boot CLI
  - STS IDE
Configuration
--------------------
Using Spring Initializr -
http://start.spring.io
--------------------
Using Spring Boot CLI -
go into bin folder of the extracted directory
./spring
vi app.groovy
@RestController
class AppCtrl{
  @RequestMapping("/")
  String app(){
    "Hello World"
  }
}

./spring run app.groovy
--------------------
Using the STS IDE -
right click in STS -> New -> Spring Starter Project
provide details
finish
--------------------
Customising Spring Boot Using application.properties -
under src/main/resources, create application.properties file

server.port=8081

Common Application Properties: https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html
--------------------
Unit 4
Spring Data JPA: The Data Tier

What is JPA

JPA - Java Persistence API
Java Classes
Relational Database
Object Relational Mapping (ORM)
Class <-> Table
--------------------
Adding Spring Data JPA -

Web module
SQL -> JPA module, Apache Derby module (Apache Derby DB with embedded support)

Q: Find how to interact with external DB like Oracle SQL Developer, PostgreSQL

pom.xml
   # spring jpa
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
  </dependency>
  
    # spring mvc
    <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>
  
   # apache derby DB
   <dependency>
    <groupId>org.apache.derby</groupId>
    <artifactId>derby</artifactId>
    <scope>runtime</scope>
  </dependency>
--------------------
Creating a Spring Data JPA Repository -

Topic.java:
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Topic{
  @Id
  private String id;
}

TopicRepository.java:
import org.springframework.data.repository.CrudRepository;

public interface TopicRepository extends CrudRepository<Topic,String>{

}

Topic is the type we dealing with
primary key id is String, so we gave
CrudRepository<Topic,String>
--------------------
Making Crud Operations with Repository - 
TopicService.java:

@Autowired
private TopicRepository topicRepository;

public void addTopic(Topic topic){
  topicRepository.save(topic);
}

public Topic getTopic(String id){
  return topicRepository.findOne(id);
}


public List<Topic> getAllTopics(){
  List<Topic> topics = new ArrayList<>();
  topicRepository.findAll().forEach(topics::add);
  return topics;
}


public void updateTopic(Topic topic,String id){
  return topicRepository.save(topic);
}

public void deleteTopic(String id){
   topicRepository.delete(id);
}

The framework sees the embedded Derby database in the classpath and assumes that 
derby is the DB to connect to, No connection info necessary.
--------------------
 Adding Course APIs -
--------------------
Adding Entity Relationship and Extending Repository -

Learn how to implement a relationship mapping using @ManyToOne as well as establish relationship based find-filter method in the JPA repository.

ManyCourses come under a Topic i.e ManyToOne relation

Course.java:
@ManyToOne - import javax.persistence

@Entity
public class Course{
  @Id
  private String id;
  private String name;
  private String desc;
  
  @ManyToOne
  private Topic topic;
}

CourseRepository.java:
public interface CourseRepository extends CrudRepository<Course,String>{
    //public List<Course> getCourseByTopic(String topicId); 
      public List<Course> findByTopicId(String topicId);
    
    //public List<Course> getCourseByName(String name); 
      public List<Course> findByName(String name); 
 }
 
 We don't have to implement the method.
 Just declare method with the findBy<Property>(in this case findByName), and Spring Data JPA will implement the method for us.
 

CourseService.java:
@Service
public class CourseService{
  @Autowired
  private CourseRepository courseRepository;
  
   public List<Course> getAllCourses(String topicId){
      List<Course> courses = new ArrayList<>();
      courseRepository.findByTopicId(topicId).forEach(courses::add);
      return courses;
  }
}
--------------------
Unit 5
Deployment and monitoring

Packaging and running a Spring Boot app - 
mvn clean install
java -jar target/<jarName>.jar

if we want to package as war
then in pom.xml, change value of packaging to war
<packaging>war</packaging>

mvn clean install
--------------------
Spring Boot Actuator - 

pom.xml:

# spring actuator
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
  </dependency>
  
GET http://localhost:8080/health

to change port of actuator
in application.properties 
management.port=9001

Building a RESTful Web Service with Spring Boot Actuator: https://spring.io/guides/gs/actuator-service/
--------------------
Wrap Up -
Summary:
Unit 1    Starting a Spring Boot App
Unit 2    Spring MVC
Unit 3    Booting Spring Boot
Unit 4    Spring Data JPA
Unit 5    App Execution and Actuator
--------------------
Ref:
https://www.youtube.com/watch?v=msXL2oDexqw&list=PLqq-6Pq4lTTbx8p2oCgcAQGQyqN8XeA1x

