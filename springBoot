pom.xml - here we mention dependencies
<parent>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-parent</artifactId>
  <version>1.4.2.RELEASE</version>
</parent>

<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>
</dependencies>

<properties>
  <java.version>1.8</java.version>
</properties>

import org.springframework.boot.SpringApplication;
@SpringBootApplication - says this is spring boot app

inside main method
SpringApplication.run(<classNamewhichAnnotatedWithSpringBootApplication>.class, <argsPassedtoMain>);

Starting Spring Boot -
Sets up default configuration
Starts Spring application context
Performs class path scan
Starts Tomcat server

Controller -
has info abt 
wt URL access triggers it?
Wt method to run when accessed?

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/hello")
The @RequestMapping maps only to the GET method by default. To map to other HTTP methods, we will have to specify it in the annotation.

Embedded Tomcat Server -
Convience
Servlet Container config is now application config
Standalone application
Useful for microservices architecture

Spring MVC Controller -
Client --> Spring MVC --> Controller classes

REST API we'll build -
Course API 
Resources: Topic, Course, Lesson
A Topic can have multiple Courses and 
a Course can consist of muliple Lessons.

Topics:
GET     /topics     Gets all topics
GET     /topics/id  Gets the topic
POST    /topics     Create new topic
PUT     /topics/id  Updates the topic
DELETE  /topics/id  Deletes the topic

import org.springframework.stereotype.Service;
@Service

In Controller, we use Service class as dependency
so create variable and inject

create variable:
private TopicService topicService;

to inject dependency add @Autowired on topic the service variable:
import org.springframework.beans.factory.annotation;
@Autowired
private TopicService topicService;

@RequestMapping("/topics")
public List<Topic> getAllTopics(){
  return topicService.getAllTopics();
}
--------------
# Getting a single resource
TopicService.java:
public Topic getTopic(String id){
  return topics.stream().filter(t -> t.getId().equals(id)).findFirst().get();
}

TopicController.java:
import org.springframework.web.bind.annotation;
@PathVariable

@RequestMapping("/topics/{id}")
public Topic getTopic(@PathVariable String id){
  return topicService.getTopic(id);
}

incase variableName we pass in request is diff from the argument name we pass in the method, then
@RequestMapping("/topics/{foo}")
public Topic getTopic(@PathVariable("foo") String id){
  return topicService.getTopic(id);
}
----------
# Creating a new resource using POST
TopicController.java:
import org.springframework.web.bind.annotation;
RequestMethod, @RequestBody 

@RequestMapping(method=RequestMethod.POST, value="/topics")
public void createTopic(@RequestBody Topic topic){
   topicService.createTopic(topic);
}

TopicService.java:
List<Topic> topics;
public Topic createTopic(Topic topic){
  return topics.add(topic);
}
----------
# Implementing Update and Delete
Update:
TopicController.java:
@RequestMapping(method=RequestMethod.PUT, value="/topics/{id}")
public void updateTopic(@RequestBody Topic topic, @PathVariable String id){
   topicService.updateTopic(topic,id);
}

TopicService.java:
List<Topic> topics;
public void updateTopic(Topic topic,String id){
   for(int i=0;i<topics.size();i++){
      Topic t = topics.get(i);
      if(t.getId().equals(id)){
          topics.set(i,topic);          
          return;
      }
   }
   
}

Delete:
TopicController.java:
@RequestMapping(method=RequestMethod.DELETE, value="/topics/{id}")
public void deleteTopic(@PathVariable String id){
   topicService.deleteTopic(id);
}

TopicService.java:
public void deleteTopic(String id){
//for loop
for(int i=0;i<topics.size();i++){
      Topic t = topics.get(i);
      if(t.getId().equals(id)){
          topics.remove(t);      
          return;
      }
   }
//or
topics.removeIf(t -> t.getId().equals(id));
}
--------------------
Unit 3
Booting Spring Boot
Unit overview -
Starting a Spring Boot App
  - Spring Initializr
  - Spring Boot CLI
  - STS IDE
Configuration
--------------------
Using Spring Initializr -
start.spring.io


